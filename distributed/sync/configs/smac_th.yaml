---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo sync-ppo
name: sync-ppo
version: 0

precision: 32

n_agents: 1

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

controller:
  store_period: 5e4
  restart_runners_period: null
  max_pbt_iterations: 1
  max_steps_per_iteration: 3e7
  initialize_rms: &irms True

parameter_server:
  root_dir: *algo
  model_name: *algo

  train_from_scratch_frac: 1
  online_frac: .2

  payoff:
    step_size: 1e-2   # step size towards the most recent data, 0 or null average payoff over the entire history
    update_interval: 180
    sampling_strategy:
      type: pfsp
      p: 1

ray_config:
  runner:
    num_cpus: 1
    num_gpus: 0
  agent:
    num_gpus: 1

monitor: {}

runner:
  n_runners: &nrunners 8
  n_steps: &nsteps 400

env:
  env_name: &env_name smac-3s5z_vs_3s6z
  n_envs: &nenvs 1
  timeout_done: &td False
  sample_mask_at_done: 0
  use_state_agent: True
  shared_policy: True

agent: {}

monitor:
  use_tensorboard: True

strategy:
  algorithm: *algo
  train_loop: {}

model:
  aid: 0
  gamma: &gamma .99

  policy:
    nn_id: policy
    units_list: [128, 128]
    w_init: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    out_scale: .01
    rnn_type: &prnn null
    rnn_units: 128
    rnn_layers: 1
    rnn_init: orthogonal
    rnn_norm: layer
    use_feature_norm: True
  value:
    nn_id: value
    units_list: [128, 128]
    w_init: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    rnn_type: &vrnn null
    rnn_units: 128
    rnn_init: orthogonal
    rnn_norm: layer
    use_feature_norm: True
  vnorm:
    nn_id: vnorm
    axis: [0, 1]

loss:
  # hyperparams for value target and advantage
  target_type: gae
  c_clip: 1
  rho_clip: 1
  adv_type: gae
  norm_adv: True

  prnn_bptt: 10
  vrnn_bptt: 10

  # hyperparams for policy optimization
  pg_type: ppo
  ppo_clip_range: .2
  policy_sample_mask: True

  # hyperparams for value learning
  value_loss: clip_huber
  value_clip_range: .2
  huber_threshold: 10
  value_sample_mask: False
  popart: &popart True

  stats:
    gamma: *gamma
    lam: &lam .95
    pg_coef: 1
    entropy_coef: .01
    value_coef: 1

trainer:
  algorithm: *algo
  aid: 0
  n_runners: *nrunners
  n_envs: *nenvs
  n_epochs: 5
  n_mbs: &nmbs 1
  n_steps: *nsteps
  popart: *popart
  clip_norm: 10
  debug: False

  policy_opt:
    opt_name: Adam
    lr: 5e-4
    eps: 1e-5
  value_opt:
    opt_name: Adam
    lr: 5e-4
    eps: 1e-5

actor:
  update_obs_rms_at_execution: False
  update_obs_at_execution: False
  rms:
    obs:
      obs_names: [obs, global_state]
      obs_normalized_axis: [0, 1]  # obs is normalized at once with the sequential dimension
      obs_normalized_ndim: 2
      normalize_obs: *irms
      use_feature_mask: True
      obs_clip: 10
    reward:
      reward_normalized_axis: [0, 1] # reward is normalized at once with the sequential dimension
      reward_normalized_ndim: 1
      normalize_reward: False
      update_reward_rms_in_time: False
      gamma: *gamma

buffer:
  type: ac

  n_runners: *nrunners
  n_envs: *nenvs
  n_steps: *nsteps
  queue_size: 2
  timeout_done: *td

  gamma: *gamma
  lam: *lam

  sample_keys: 
    - obs
    - global_state
    - action
    - action_mask
    - prev_info
    - value
    - reward
    - discount
    - reset
    - sample_mask
    - mu_logprob
    - mu_logits
    - state_reset
    - state
