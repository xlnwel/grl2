---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo sync-ppo
name: sync-ppo
info: sync-ppo
version: 0

precision: 32

n_agents: 2
self_play: True

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

controller:
  store_period: 5e4
  reload_strategy_pool_period: 5e4
  restart_runners_period: null
  eval_period: null
  max_pbt_iterations: 100
  max_steps_per_iteration: 1e6
    # - [0, 1e6]
    # - [20, 3e6]
  initialize_rms: &irms False

parameter_server:
  root_dir: *algo
  model_name: *algo

  score_metric: score   # stats recorded in payoff tables
  train_from_scratch_frac: 1
  train_from_latest_frac: 1
  reset_policy_head: False
  online_frac: .25
    # - [1, 1]
    # - [5, .75]
    # - [10, .5]
    # - [20, .25]
  update_interval: 1000

  payoff:
    step_size: 1e-1
    sampling_strategy:
      type: fsp
      p: 1
      threshold: .3

  # rule_strategies:
  #   # agent name / config
  #   random:
  #     aid: 1
  #     vid: 1
  #     path: rule/random   # path to the file that defines Strategy
  #     # other configs

ray_config:
  runner:
    num_cpus: 1
  agent:
    num_gpus: 0

monitor: {}

runner:
  n_runners: &nrunners 8
  n_steps: &nsteps 2
  push_every_episode: False
  algo_type: onpolicy

env:
  env_name: &env_name spiel-leduc_poker
  uid2aid: [0, 1]
  n_envs: &nenvs 4
  timeout_done: &td True
  use_action_mask: True

agent: {}

strategy:
  algorithm: *algo
  train_loop: {}

model:
  aid: 0
  gamma: &gamma .99
  eval_act_temp: 1
  print_for_debug: False

  policy:
    nn_id: policy
    units_list: [128, 128]
    w_init: orthogonal
    activation: relu
    norm: null
    out_scale: .01
    rnn_type: &prnn null
    rnn_units: 64
  value:
    nn_id: value
    units_list: [128, 128]
    w_init: orthogonal
    activation: relu
    norm: null
    rnn_type: &vrnn null
    rnn_units: 64

loss:
  # hyperparams for value target and advantage
  target_type: vtrace
  c_clip: 1
  rho_clip: 1
  adv_type: vtrace
  norm_adv: True

  # hyperparams for policy optimization
  pg_type: ppo
  ppo_clip_range: .2
  reg_clip: .2
  reg_type: kl_reverse
  policy_sample_mask: True

  # hyperparams for value learning
  value_loss: mse
  value_clip_range: .2
  value_sample_mask: False

  # hyperparams for meta-learning
  stats:
    gamma: *gamma
    lam: &lam .95
    pg_coef: 1
    entropy_coef: 1e-2
    value_coef: 1

trainer:
  algorithm: *algo
  aid: 0
  n_runners: *nrunners
  n_envs: *nenvs
  n_epochs: &nepochs 1
  n_mbs: &nmbs 1
  n_steps: *nsteps     # BPTT length
  debug: True

  theta_opt:
    opt_name: adam
    lr: 1e-3
    clip_norm: 10
    eps: 1e-5

actor:
  algorithm: *algo
  update_obs_rms_at_execution: False
  update_obs_at_execution: False
  rms:
    obs:
      obs_names: [obs, global_state]
      obs_normalized_axis: [0, 1]  # obs is normalized at once with the sequential dimension
      obs_normalized_ndim: 2
      normalize_obs: *irms
      obs_clip: 10
    reward:
      reward_normalized_axis: [0, 1] # reward is normalized at once with the sequential dimension
      reward_normalized_ndim: 1
      normalize_reward: False
      update_reward_rms_in_time: False
      gamma: *gamma

buffer:
  type: ac
  data_type: seq

  n_runners: *nrunners
  n_envs: *nenvs
  n_steps: *nsteps
  queue_size: 2
  timeout_done: *td
  gamma: *gamma
  lam: *lam

  # mini-batch size = n_runners * n_envs * epslen / n_mbs
  sample_keys:
    - obs
    - global_state
    - action
    - value
    - reward
    - discount
    - reset
    - mu_logprob
    - mu_logits
    - state_reset
    - state
    - advantage
    - v_target
