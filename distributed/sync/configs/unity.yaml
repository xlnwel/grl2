---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo hm
name: hm
version: 0

precision: 32

n_agents: 1

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

controller:
  store_period: 1e6
  restart_runners_period: null
  max_pbt_iterations: 1
  max_steps_per_iteration: 3e8
  initialize_rms: &irms True

parameter_server:
  root_dir: *algo
  model_name: *algo

  train_from_scratch_frac: 1
  online_frac: 1

  payoff:
    step_size: .1
    sampling_strategy:
      type: fsp
      p: 1

ray_config:
  runner:
    num_cpus: 1

  agent:
    num_gpus: 1

monitor: {}

runner:
  n_runners: &nrunners 60
  n_steps: &nsteps 256
  record_self_play_stats: False
  push_every_episode: False

env:
  env_name: &env_name unity-combat2d
  max_episode_steps: 200
  frame_skip: 1
  unity_config:
    worker_id: 20000
    file_name: '/home/ubuntu/wuyunkun/hm/env/unity_env/data/3d/3d.x86_64'
  reward_config:
    detect_reward: 0
    main_dead_reward: -1
    blue_dead_reward: 1
    grid_reward: 0
  n_envs: &nenvs 1  # This should be consistent with the Unity environemnt copies
  uid2aid: [0,0,0,0,0]

  bound_method: null
  to_rescale: False
  action_low: -2
  action_high: 2

agent: {}

strategy:
  train_loop:
    n_epochs: &nepochs 5
    n_mbs: &nmbs 1
    n_aux_epochs: &naepochs 9
    n_pi: &npi 16
    n_segs: &nsegs 16
    n_aux_mbs_per_seg: &nambs 2
    max_kl: 0      # early stop when max_kl is violated. 0 or null suggests unbound

    # (once reuse null)
    # "once" updates values at the end of each epoch
    # "reuse" updates values using value from train which is staler than once
    # null doesn't update values.
    value_update: null

model:
  sample_size: &ss 16
  actor_rnn_type: &arnn null
  value_rnn_type: &vrnn null
  

  policy:
    use_prev_reward: False
    use_prev_action: False
    encoder: 
      nn_id: mlp
      units_list: [64, 64, 64]
      kernel_initializer: orthogonal
      activation: relu
      norm: layer
      norm_after_activation: True
      norm_kwargs:
        epsilon: 1.e-5
    rnn:
      nn_id: *arnn
      units: 64
      kernel_initializer: orthogonal
      use_ln: True
    policy:
      nn_id: policy
      units_list: []
      kernel_initializer: orthogonal
      eval_act_temp: 1
      out_gain: .01
      init_std: 1
      out_act: tanh

  value:
    use_prev_reward: False
    use_prev_action: False
    encoder:
      nn_id: mlp
      units_list: [64, 64, 64]
      kernel_initializer: orthogonal
      activation: relu
      norm: layer
      norm_after_activation: True
      norm_kwargs:
        epsilon: 1.e-5
    rnn:
      nn_id: *vrnn
      units: 64
      kernel_initializer: orthogonal
      use_ln: True
    value:
      nn_id: value
      units_list: []
      kernel_initializer: orthogonal
      activation: relu

loss:
  policy:
    ppo_clip_range: .2
    pg_coef: 1
    entropy_coef: 5e-6
    sample_mask: False
    norm_adv: True
  value:
    value_loss: mse
    value_clip_range: .2
    value_coef: 1
    sample_mask: False

  stats:
    gamma: *gamma
    lam: .95
    pg_coef: 1
    entropy_coef: .01
    value_coef: 1

trainer:
  algorithm: *algo

  actor_rnn_type: *arnn
  value_rnn_type: *vrnn
  sample_size: *ss     # BPTT length
  store_state: True
  policy:
    optimizer:
      opt_name: adam
      schedule_lr: False
      lr: 1e-3
      clip_norm: 10
      epsilon: 1e-5
      weight_decay: 0
  value:
    optimizer:
      opt_name: adam
      schedule_lr: False
      lr: 1e-3
      clip_norm: 10
      epsilon: 1e-5
actor:
  algorithm: *algo

  rms:
    obs_names: [obs, global_state]
    normalize_obs: *irms
    normalize_reward: True
    obs_normalized_axis: [0, 1]
    reward_normalized_axis: [0, 1]
    update_reward_rms_in_time: True
    gamma: &gamma .995

buffer:
  type: ac
  use_dataset: False

  # PPO configs
  adv_type: gae   # nae or gae
  gamma: *gamma
  lam: .95
  n_runners: *nrunners
  n_envs: *nenvs
  n_steps: *nsteps
  n_epochs: *nepochs
  n_mbs: *nmbs    # number of minibatches
  actor_rnn_type: *arnn
  value_rnn_type: *vrnn
  fragment_size: null  # must be multiple of sample_size if the latter is present
  sample_size: *ss

  # PPG configs
  n_pi: *npi
  n_segs: *nsegs
  n_aux_mbs_per_seg: *nambs
  n_aux_epochs: *naepochs

  # mini-batch size = n_runners * n_envs * epslen / n_mbs
  sample_keys:
    - obs
    - global_state
    - prev_reward
    - prev_action
    - action
    - reward
    - value
    - traj_ret
    - advantage
    - logprob
    - mask
    - actor_h
    - actor_c
    - value_h
    - value_c
