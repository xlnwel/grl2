---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo zero
name: zero
version: 0

precision: 32

n_agents: 2

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

controller:
  store_period: 5e5
  restart_runners_period: null
  max_pbt_iterations: 1
  max_steps_per_iteration: 3e8
  initialize_rms: &irms True

parameter_server:
  root_dir: *algo
  model_name: *algo

  train_from_scratch_frac: 1
  online_frac: 1

  payoff:
    step_size: 1e-2   # step size towards the most recent data, 0 or null average payoff over the entire history
    update_interval: 180
    sampling_strategy:
      type: pfsp
      p: 1

ray_config:
  runner:
    num_cpus: 1
  agent:
    num_gpus: 1

monitor: {}

runner:
  n_runners: &nrunners 30
  n_steps: &nsteps 128
  record_self_play_stats: False
  push_every_episode: False

env:
  env_name: &env_name unity-combat3d_1v1
  max_episode_steps: 500
  frame_skip: 1
  fly_control_dir: 0821-entropy_coef=0-frame_skip=5
  unity_config:
    worker_id: 20000
    file_name: '/home/ubuntu/wuyunkun/hm/env/unity_env/data/3d/3d.x86_64'
  reward_config:
    detect_reward: 0
    main_dead_reward: -10
    blue_dead_reward: 10
    ally_dead_reward: -1
    grid_reward: 0
  n_envs: &nenvs 1  # This should be consistent with the Unity environemnt copies
  uid2aid: [0, 1]

  bound_method: null
  to_rescale: False
  action_low: -2
  action_high: 2

agent: {}

strategy:
  algorithm: *algo
  train_loop:
    use_dataset: &dataset False
    K: &K null
    L: &L 0
    extra_meta_step: &ems 0 # 0/1

model:
  aid: 0
  rnn_type: &rnn null
  sample_size: *nsteps
  K: *K
  L: *L
  extra_meta_step: *ems

  encoder: 
    nn_id: mlp
    units_list: []
    kernel_initializer: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    norm_kwargs:
      epsilon: 1e-5
  rnn:
    nn_id: *rnn
    units: 64
    kernel_initializer: orthogonal
    recurrent_initializer: orthogonal
    use_ln: True
  policy:
    nn_id: policy
    units_list: [64, 64, 64]
    kernel_initializer: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    norm_kwargs:
      epsilon: 1e-5
    eval_act_temp: 1
    out_gain: .01
    init_std: 1
    out_act: tanh
  value:
    nn_id: value
    units_list: [64, 64, 64]
    kernel_initializer: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    norm_kwargs:
      epsilon: 1.e-5
  embed: null
  meta:
    nn_id: meta
    pg_coef:
      outer: 1
      default: 1
      init: null
      act: sigmoid
    entropy_coef:
      outer: 1e-4
      default: 1e-4
      scale: 1
      bias: 0
      init: null
      act: tanh
    value_coef:
      outer: 1
      default: 1
      scale: 1
      bias: 0
      init: null
      act: sigmoid
    gamma: 
      outer: &gamma .99
      default: *gamma
      scale: 1
      bias: 0
      init: null
      act: sigmoid
    lam:
      outer: &lam .95
      default: *lam
      scale: 1
      bias: 0
      init: null
      act: sigmoid

loss:
  rl:
    # hyperparams for value target and advantage
    target_type: vtrace
    c_clip: 1
    rho_clip: 1
    adv_type: vtrace
    norm_adv: True

    # hyperparams for policy optimization
    pg_type: ppo
    ppo_clip_range: .2
    use_dice: False
    dice_axis: null
    dice_lam: 1
    kl: reverse
    kl_coef: 1

    # hyperparams for value learning
    value_loss: mse
    value_clip_range: .2
    sample_mask: False
  meta:
    # hyperparams for value target and advantage
    target_type: vtrace
    c_clip: 1
    rho_clip: 1
    adv_type: vtrace
    norm_adv: True

    # hyperparams for policy optimization
    pg_type: ppo
    ppo_clip_range: .2
    use_dice: False
    dice_axis: null
    dice_lam: 1
    kl: reverse
    kl_coef: 1

    # hyperparams for value learning
    value_loss: mse
    value_clip_range: .2
    sample_mask: False

trainer:
  algorithm: *algo
  aid: 0
  n_runners: *nrunners
  n_envs: *nenvs
  n_epochs: &nepochs 5
  n_mbs: &nmbs 1
  sample_size: *nsteps     # BPTT length
  timeout_done: True
  meta_type: plain
  K: *K
  L: *L
  extra_meta_step: *ems
  store_state: True

  optimizer:
    opt_name: adam
    schedule_lr: False
    lr: 5e-4
    clip_norm: .5
    epsilon: 1e-5
    weight_decay: 0
  meta_opt:
    opt_name: adam
    schedule_lr: False
    lr: 5e-4
    clip_norm: .5
    epsilon: 1e-5

actor:
  algorithm: *algo

  rms:
    obs_names: [obs, global_state]
    normalize_obs: *irms
    normalize_reward: True
    obs_normalized_axis: [0, 1]
    reward_normalized_axis: [0, 1]
    update_reward_rms_in_time: True
    gamma: *gamma

buffer:
  type: ac
  use_dataset: *dataset

  n_runners: *nrunners
  n_envs: *nenvs
  n_steps: *nsteps
  fragment_size: null
  sample_size: *nsteps
  K: *K
  L: *L
  extra_meta_step: *ems
  queue_size: 2
  timeout_done: True
  rnn_type: *rnn

  # mini-batch size = n_runners * n_envs * epslen / n_mbs
  sample_keys:
    - obs
    - global_state
    - prev_reward
    - prev_action
    - action
    - value
    - reward
    - discount
    - reset
    - mu_logprob
    - mu_mean
    - mu_std
    - mask
    - h
    - c
