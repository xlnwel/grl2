---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo sync-zero
name: zero
version: 0

precision: 32

n_agents: 1
seed: 42

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

controller:
  store_period: 5e4
  restart_runners_period: null
  max_pbt_iterations: 1
  max_steps_per_iteration: 3e7
  initialize_rms: &irms True

parameter_server:
  root_dir: *algo
  model_name: *algo

  train_from_scratch_frac: 1
  online_frac: .2

  payoff:
    step_size: 1e-2   # step size towards the most recent data, 0 or null average payoff over the entire history
    update_interval: 180
    sampling_strategy:
      type: pfsp
      p: 1

ray_config:
  runner:
    num_cpus: 1
  agent:
    num_gpus: 1

monitor: {}

runner:
  n_runners: &nrunners 32
  n_steps: &nsteps 20
  push_every_episode: False

env:
  env_name: &env_name smac-corridor
  n_envs: &nenvs 1
  use_state_agent: True
  use_mustalive: True
  add_center_xy: True
  timeout_done: True
  add_agent_id: True
  do_evaluation: False
  sample_mask_at_done: 0
  use_action_mask: True

  use_idx: True
  use_hidden: True

agent: {}

strategy:
  algorithm: *algo
  train_loop: {}

model:
  aid: 0
  rnn_type: &rnn null
  rl_reward: &rlreward sum
  gamma: &gamma .99
  meta_reward_type: intrinsic
  K: &K 0
  L: &L 0
  extra_meta_step: &ems 1 # 0/1

  encoder: 
    nn_id: null
  rnn:
    nn_id: *rnn
    units: 64
    w_init: orthogonal
    use_ln: True
  policy:
    nn_id: policy
    units_list: [64, 64]
    w_init: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    norm_kwargs:
      axis: -1
      create_scale: True
      create_offset: True
    eval_act_temp: 1
    out_gain: .01
    index: null
    index_config: 
      use_shared_bias: False
      use_bias: True
      w_init: orthogonal
  value:
    nn_id: value
    units_list: [64, 64]
    w_init: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    norm_kwargs:
      axis: -1
      create_scale: True
      create_offset: True
    index: null
    index_config:
      use_shared_bias: False
      use_bias: True
      w_init: orthogonal
  outer_value:
    nn_id: value
    units_list: [64, 64]
    w_init: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    norm_kwargs:
      axis: -1
      create_scale: True
      create_offset: True
    index: null
    index_config:
      use_shared_bias: False
      use_bias: True
      w_init: orthogonal
  meta_reward: 
    nn_id: reward
    units_list: [64, 64]
    w_init: orthogonal
    activation: relu
    norm: layer
    norm_after_activation: True
    norm_kwargs:
      axis: -1
      create_scale: True
      create_offset: True
    out_scale: .01
    out_act: atan
    combine_xa: False
    index: null
    index_config:
      use_shared_bias: False
      use_bias: True
      w_init: orthogonal
  meta_params:
    nn_id: meta
    pg_coef:
      outer: 1
      default: 1
      init: null
      act: sigmoid
    entropy_coef:
      outer: 1e-2
      default: 1e-2
      init: null
      act: tanh
    value_coef:
      outer: 1
      default: 1
      scale: 1
      bias: 0
      init: null
      act: sigmoid
    gamma: 
      outer: *gamma
      default: *gamma
      scale: 1
      bias: 0
      init: null
      act: sigmoid
    lam:
      outer: &lam .95
      default: *lam
      scale: 1
      bias: 0
      init: null
      act: sigmoid
    reward_scale:
      outer: 1
      default: 1
      scale: 5
      bias: 0
      init: null
      act: sigmoid
    reward_bias:
      outer: 0
      default: 0
      scale: 5
      bias: 0
      init: null
      act: tanh
    reward_coef:
      outer: 1
      default: 1
      scale: 1
      bias: 0
      init: null
      act: tanh

loss:
  # hyperparams for value target and advantage
  target_type: vtrace
  c_clip: 1
  rho_clip: 1
  adv_type: vtrace
  norm_adv: True
  norm_meta_adv: True

  # hyperparams for policy optimization
  pg_type: ppo
  ppo_clip_range: .2
  use_dice: False
  dice_axis: null
  dice_lam: 1
  kl: reverse
  kl_coef: 1
  policy_sample_mask: True

  # hyperparams for value learning
  value_loss: mse
  value_clip_range: .2
  value_sample_mask: False
  stop_target_grads: False

  # hyperparams for meta-learning
  meta_reward_coef: 0
  joint_objective: False

trainer:
  algorithm: *algo
  aid: 0
  n_runners: *nrunners
  n_envs: *nenvs
  n_epochs: &nepochs 1
  n_mbs: &nmbs 1
  n_meta_epochs: 1
  n_steps: *nsteps     # BPTT length
  timeout_done: &td True
  meta_type: plain
  K: *K
  L: *L
  msmg_type: avg
  extra_meta_step: *ems
  store_state: True
  event_done: False

  theta_opt:
    opt_name: adam
    lr: 5e-4
    clip_norm: 10
    b1: 0
    eps: 1e-5
  phi_opt:
    opt_name: adam
    lr: 5e-4
    clip_norm: 10
    eps: 1e-5
  meta_params_opt:
    opt_name: adam
    lr: 1e-4
    clip_norm: .5
    eps: 1e-5
    weight_decay: null
  meta_reward_opt:
    opt_name: adam
    lr: 1e-4
    clip_norm: .5
    eps: 1e-5
    weight_decay: null

actor:
  algorithm: *algo

  rms:
    obs_names: [obs, global_state, hidden_state]
    normalize_obs: *irms
    normalize_reward: True
    obs_normalized_axis: [0, 1]
    reward_normalized_axis: [0, 1]
    update_reward_rms_in_time: True
    gamma: *gamma

buffer:
  type: ac

  n_runners: *nrunners
  n_envs: *nenvs
  n_steps: *nsteps
  queue_size: 2
  K: *K
  L: *L
  extra_meta_step: *ems
  timeout_done: *td
  rnn_type: *rnn

  # mini-batch size = n_runners * n_envs * epslen / n_mbs
  sample_keys:
    - obs
    - action
    - reward
    - discount
    - reset
    - value
    - mu_logprob
    - mu
    - mask
    - h
    - c
